<div class="page-width">
  <h2>width</h2>
  <div id="fotovue" class="foto__wrapper">
    <input type="file" @change="handleFileUpload" v-if="!img" />
    <div v-cloak>
      <cropper
      v-if="img"
      class="cropper"
      :src="img"
      ref="cropper"
      :stencil-props="{ aspectRatio: 4/4 }"
      @change="onChange"
    ></cropper>
    <button @click="crop" v-if="img">Crop</button>
    <button @click="reset" v-if="img">Reset</button>
    <div class="results" v-if="showResults">
       <div class="results__wrapper">
        <div class="results__coordinates">
          <p class="results__coordinates-title">Results:</p>
          <p class="results__coordinates-value">Width: ${coordinates.width}</p>
          <p class="results__coordinates-value">Height: ${coordinates.height}</p>
          <p class="results__coordinates-value">Left: ${coordinates.left}</p>
          <p class="results__coordinates-value">Top: ${coordinates.top}</p>
        </div>
        <div class="results__preview">
          <img v-if="image.src" :src="image.src" alt="Cropped Image" loading="lazy" />
        </div>
      </div>
    </div>
    </div>
  </div>
</div>



<script type="module">
  window.addEventListener('load', () => {
    const { createApp } = Vue;
    const { Cropper } = VueAdvancedCropper;

    // Функція для визначення типу файлу
    function getMimeType(file, fallback = null) {
      const byteArray = (new Uint8Array(file)).subarray(0, 4);
      let header = '';
      for (let i = 0; i < byteArray.length; i++) {
        header += byteArray[i].toString(16);
      }
      switch (header) {
        case "89504e47":
          return "image/png";
        case "47494638":
          return "image/gif";
        case "ffd8ffe0":
        case "ffd8ffe1":
        case "ffd8ffe2":
        case "ffd8ffe3":
        case "ffd8ffe8":
          return "image/jpeg";
        default:
          return fallback;
      }
    }

    createApp({
      delimiters: ['${', '}'], // Вказуємо роздільники для шаблонів
      components: {
        Cropper
      },
      data() {
        return {
          coordinates: {
            width: 0,
            height: 0,
            left: 0,
            top: 0,
          },
          image: {
            src: null,
            type: null
          },
          img: null,
          showResults: false
        };
      },
      methods: {
        crop() {
          const { coordinates, canvas } = this.$refs.cropper.getResult();
          this.coordinates = coordinates;
          canvas.toBlob((blob) => {
            // Тут можна зробити щось з blob: завантажити на сервер, завантажити і т.д.
          }, this.image.type);
          this.image.src = canvas.toDataURL();
          this.showResults = true; // Показати результати
        },
        reset() {
          this.image = {
            src: null,
            type: null
          };
          this.img = null;
          this.showResults = false;
        },
        handleFileUpload(event) {
          const { files } = event.target;
          if (files && files[0]) {
            if (this.image.src) {
              URL.revokeObjectURL(this.image.src);
            }
            const blob = URL.createObjectURL(files[0]);
            const reader = new FileReader();
            reader.onload = (e) => {
              this.img = blob;
              this.image.type = getMimeType(e.target.result, files[0].type);
            };
            reader.readAsArrayBuffer(files[0]);
          }
        }
      },
      destroyed() {
        if (this.image.src) {
          URL.revokeObjectURL(this.image.src);
        }
      },
      mounted() {
          const cloakedElements = document.querySelectorAll('[v-cloak]');
          cloakedElements.forEach(element => {
            element.removeAttribute('v-cloak');
          });
        }
    }).mount('#fotovue');
  });
</script>


<style>
  [v-cloak] {
  display: none;
}


.foto__wrapper {
  position: relative;
}

.cropper {
  width: 100%;
  height: 400px;
  overflow: hidden; /* Забирає зайві частини зображення */
}

.vue-advanced-cropper__image {
  object-fit: cover; /* Заповнює весь простір контейнера зображенням */
}

.results {
  position: absolute;
  right: 40px;
  bottom: 40px;
}

.results__wrapper {
  display: flex;
  align-items: center;
  border: 1px dashed hsla(0, 0%, 100%, 0.5);
  background: rgba(0, 0, 0, 0.8);
  color: #fff;
  padding: 10px;
}

.results__coordinates {
  font-size: 10px;
  pointer-events: none;
  margin-right: 10px; /* додає відстань між текстом і зображенням */
}

.results__coordinates-title {
  margin-top: 2px;
  margin-bottom: 2px;
  font-weight: 700;
}

.results__coordinates-value {
  margin-top: 2px;
  margin-bottom: 2px;
  line-height: 1.7;
}

.results__preview {
  width: 120px; /* Встановлює ширину контейнера для зображення */
  height: 120px; /* Встановлює висоту контейнера для зображення */
  flex-shrink: 0;
}

.results__preview img {
  width: 100%;
  height: 100%;
  object-fit: cover; /* Зображення зберігає пропорції та заповнює контейнер */
  display: block;
}

#fotovue .vue-advanced-cropper__stretcher,
#fotovue .vue-advanced-cropper__background,
#fotovue .vue-advanced-cropper__foreground {
  display: block !important;
}


</style>

{% comment %} <div class="page-width">
  <h2>width</h2>
  <div id="fotovue" class="foto__wrapper">
    <cropper
      class="cropper"
      :src="img"
      ref="cropper"
      :stencil-props="{ aspectRatio: 4/4 }"
      @change="onChange"
    ></cropper>
    <button @click="crop">Crop</button>
    <div class="results" v-if="showResults">
      <div class="results__wrapper">
        <div class="results__coordinates">
          <p class="results__coordinates-title">Results:</p>
          <p class="results__coordinates-value">Width: ${coordinates.width}</p>
          <p class="results__coordinates-value">Height: ${coordinates.height}</p>
          <p class="results__coordinates-value">Left: ${coordinates.left}</p>
          <p class="results__coordinates-value">Top: ${coordinates.top}</p>
        </div>
        <div class="results__preview">
          <img v-if="image" :src="image" alt="Cropped Image" loading="lazy" />
        </div>
      </div>
    </div>
  </div>
</div>


<script type="module">
  window.addEventListener('load', () => {
    const { createApp } = Vue;
    const { Cropper } = VueAdvancedCropper;

    createApp({
      delimiters: ['${', '}'], 
      components: {
        Cropper
      },
      data() {
        return {
          coordinates: {
            width: 0,
            height: 0,
            left: 0,
            top: 0,
          },
          image: null,
          img: "https://images.unsplash.com/photo-1516007445015-fc20d86f8468?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=634&q=80",
          showResults: false
        };
      },
      methods: {
        crop() {
          const { coordinates, canvas } = this.$refs.cropper.getResult();
          this.coordinates = coordinates;
          this.image = canvas.toDataURL();
          this.showResults = true; 
        }
      }
    }).mount('#fotovue');
  });
</script>


<style>
.foto__wrapper {
  position: relative;
}

.cropper {
  width: 100%;
  height: 400px;
}

.results {
  position: absolute;
  right: 40px;
  bottom: 40px;
}

.results__wrapper {
  display: flex;
  align-items: center;
  border: 1px dashed hsla(0, 0%, 100%, 0.5);
  background: rgba(0, 0, 0, 0.8);
  color: #fff;
  padding: 10px;
}

.results__coordinates {
  font-size: 10px;
  pointer-events: none;
  margin-right: 10px; 
}

.results__coordinates-title {
  margin-top: 2px;
  margin-bottom: 2px;
  font-weight: 700;
}

.results__coordinates-value {
  margin-top: 2px;
  margin-bottom: 2px;
  line-height: 1.7;
}

.results__preview {
  width: 120px;
  height: 120px; 
  flex-shrink: 0;
}

.results__preview img {
  width: 100%;
  height: 100%;
  object-fit: cover; 
  display: block;
}

#fotovue .vue-advanced-cropper__stretcher,
#fotovue .vue-advanced-cropper__background,
#fotovue .vue-advanced-cropper__foreground {
  display: block !important;
}

</style> {% endcomment %}

{% comment %} onChange({ coordinates, canvas }) {
          console.log(canvas);
          this.coordinates = coordinates;
          if (canvas) {
            this.image = canvas.toDataURL();
          }
        } {% endcomment %}


{% comment %} <div id="fotovue">
   ${test}
    <h2>Hellou</h2>
</div>

<script type="module">
 

  const fotoVueItem = Vue.createApp({
    delimiters: ['${', '}'],
    data() {
        return {
            test: 'Hello Vue'
        }
    }
  }).mount('#fotovue')
</script> {% endcomment %}
